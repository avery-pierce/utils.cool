{"version":3,"file":"component---src-pages-timezone-tsx-14e8b9b6660e77ce1a02.js","mappings":"kLAEO,SAASA,EAAT,GAGJ,IAHyBC,EAGzB,EAHyBA,SAAUC,EAGnC,EAHmCA,MAIpC,OACE,sBAAIA,MAAK,eACPC,WAAY,UACZC,cAAe,YACfC,WAAY,SACZC,SAAU,OACVC,MAAO,QACJL,IACDD,GAIO,SAASO,EAAT,GAIZ,IAJgCP,EAIhC,EAJgCA,SAAUC,EAI1C,EAJ0CA,MAAOO,EAIjD,EAJiDA,KAKlD,OACE,wBAAMP,MAAK,eACTC,WAAY,SACZE,WAAYI,EAAO,IAAM,SACzBF,MAAO,QACJL,IAEFD,K,sEC5BKS,E,oBAQG,SAASC,EAAeC,QAAmD,IAAnDA,IAAAA,EAA4BF,EAAeG,QAChF,OAAoCC,EAAAA,EAAAA,UAAS,IAAIC,MAA1CC,EAAP,KAAmBC,EAAnB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WAER,IAAIC,EAWJ,OATuB,SAAjBC,IACJ,IAAMC,EAcZ,SAAqCC,EAAkCV,QAA2B,IAA7DU,IAAAA,EAAsB,IAAIP,MAC7D,IAAMQ,EAA8B,IAAOD,EAAcE,kBACzD,GAAIZ,IAAcF,EAAeG,OAC/B,OAAOU,EAGT,IAAME,EAAyB,GAAKH,EAAcI,aAClD,GAAId,IAAcF,EAAeiB,OAC/B,OAAiC,IAAzBF,EAAiCH,EAAcE,kBAGzD,IAAMI,EAAuB,GAAKN,EAAcO,aAChD,GAAIjB,IAAcF,EAAeoB,KAC/B,OAA+B,GAAvBF,EAA4B,IAClCN,EAAcI,aACdJ,EAAcE,kBAIlB,OAAO,KAjCWO,CAA4B,IAAIhB,KAAQH,GACtDO,EAASa,YAAW,WAClBf,EAAc,IAAIF,MAClBK,MACCC,GAGLD,GACO,kBAAMa,aAAad,MACzB,CAACP,IAEGI,ECzBM,SAASkB,IACtB,IAAMC,EAAaxB,EAAeD,EAAeG,QAC3CuB,EAAeC,KAAKC,iBAAiBC,kBAAkBC,SAE7D,OACE,gCACE,2BAAK,gBAAChC,EAAA,EAAD,4BAA+B2B,EAAWM,mBAC/C,2BAAK,gBAACjC,EAAA,EAAD,KAAW4B,M,SDTV1B,GAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,OAAAA,GAAAA,SAAAA,EAAAA,EAAAA,KAAAA,GAAAA,O,CAAAA,IAAAA,EAAAA","sources":["webpack://utils-cool/./src/components/CoolText.tsx","webpack://utils-cool/./src/hooks/useSystemClock.ts","webpack://utils-cool/./src/pages/timezone.tsx"],"sourcesContent":["import React, { CSSProperties, ReactNode } from \"react\"\n\nexport function CoolTitle({ children, style }: { \n  children?: ReactNode | undefined,\n  style: CSSProperties\n}) {\n  return (\n    <h1 style={{\n      fontFamily: \"Monoton\",\n      textTransform: \"uppercase\",\n      fontWeight: \"normal\",\n      fontSize: \"30pt\",\n      color: \"#FFF\",\n      ...style\n    }}>{children}</h1>\n  )\n}\n\nexport default function CoolText({ children, style, bold }: {\n  children?: ReactNode | undefined,\n  style?: CSSProperties,\n  bold?: boolean\n}) {\n  return (\n    <span style={{\n      fontFamily: \"Roboto\",\n      fontWeight: bold ? 500 : \"normal\",\n      color: \"#FFF\",\n      ...style,\n    }}>\n      {children}\n    </span>\n  )\n}","import { useEffect, useState } from \"react\";\n\nexport enum ClockPrecision {\n  SECOND,\n  MINUTE,\n  HOUR,\n}\n\n/// Returns the current system time, updating only when the value at precision changes.\n/// The effect is that this hook triggers a re-render in sync with the system clock time.\nexport default function useSystemClock(precision: ClockPrecision = ClockPrecision.SECOND) {\n  const [cachedTime, setCachedTime] = useState(new Date())\n\n  useEffect(() => {\n\n    let handle: NodeJS.Timeout\n\n    const scheduleUpdate = () => {\n      const delay = millisecondsUntilNextUpdate(new Date(), precision)\n      handle = setTimeout(() => {\n        setCachedTime(new Date())\n        scheduleUpdate()\n      }, delay)\n    }\n\n    scheduleUpdate()\n    return () => clearTimeout(handle)\n  }, [precision])\n\n  return cachedTime\n}\n\nfunction millisecondsUntilNextUpdate(referenceDate: Date = new Date(), precision: ClockPrecision) {\n  const millisecondsUntilNextSecond = 1000 - referenceDate.getMilliseconds()\n  if (precision === ClockPrecision.SECOND) {\n    return millisecondsUntilNextSecond\n  }\n\n  const secondsUntilNextMinute = 60 - referenceDate.getSeconds()\n  if (precision === ClockPrecision.MINUTE) {\n    return (secondsUntilNextMinute * 1000) - referenceDate.getMilliseconds()\n  }\n\n  const minutesUntilNextHour = 60 - referenceDate.getMinutes()\n  if (precision === ClockPrecision.HOUR) {\n    return (minutesUntilNextHour * 60 * 1000) -\n      referenceDate.getSeconds() -\n      referenceDate.getMilliseconds()\n      \n  }\n\n  return null\n}","import React from \"react\"\nimport CoolText from \"../components/CoolText\"\nimport useSystemClock, { ClockPrecision } from \"../hooks/useSystemClock\"\n\nexport default function Timezone() {\n  const systemDate = useSystemClock(ClockPrecision.SECOND)\n  const timezoneName = Intl.DateTimeFormat().resolvedOptions().timeZone\n\n  return (\n    <>\n      <div><CoolText>The current time is {systemDate.toLocaleString()}</CoolText></div>\n      <div><CoolText>{timezoneName}</CoolText></div>\n    </>\n  )\n}\n"],"names":["CoolTitle","children","style","fontFamily","textTransform","fontWeight","fontSize","color","CoolText","bold","ClockPrecision","useSystemClock","precision","SECOND","useState","Date","cachedTime","setCachedTime","useEffect","handle","scheduleUpdate","delay","referenceDate","millisecondsUntilNextSecond","getMilliseconds","secondsUntilNextMinute","getSeconds","MINUTE","minutesUntilNextHour","getMinutes","HOUR","millisecondsUntilNextUpdate","setTimeout","clearTimeout","Timezone","systemDate","timezoneName","Intl","DateTimeFormat","resolvedOptions","timeZone","toLocaleString"],"sourceRoot":""}