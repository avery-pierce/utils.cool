{"version":3,"file":"component---src-pages-timer-js-0092b2db1caf16990020.js","mappings":"kIAiBA,IAde,SAAC,GAAgB,IAAfA,EAAc,EAAdA,SACf,OACE,gCACE,2BACE,gBAAC,KAAD,CAAMC,GAAG,KAAT,QACA,gBAAC,KAAD,CAAMA,GAAG,UAAT,UAEF,4BACGD,M,uFCiCT,MAxCc,WACZ,OAAkCE,EAAAA,EAAAA,UAAS,MAApCC,EAAP,KAAkBC,EAAlB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,MAAlCG,EAAP,KAAiBC,EAAjB,KAEMC,EAwBR,SAA2BJ,EAAWE,GACpC,IAAMG,EC/BO,SAAwBC,QAAoB,IAApBA,IAAAA,EAAgB,IACrD,OAAwBP,EAAAA,EAAAA,UAAS,IAAIQ,MAA9BC,EAAP,KAAaC,EAAb,KAUA,OARAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAASC,aAAY,WACzBH,EAAQ,IAAIF,QACX,IAAKD,GAER,OAAO,kBAAMO,cAAcF,MAC1B,CAACL,IAEGE,EDoBaM,CAAe,IAEnC,IAAKd,EACH,OAAO,EAKT,QAFoBE,GAAYG,GACTU,UAAYf,EAAUe,WACjC,IAjCIC,CAAkBhB,EAAWE,GACvCe,GAAUC,EAAAA,EAAAA,cAAY,WAC1BjB,EAAa,IAAIM,MACjBJ,EAAY,QACX,IAEGgB,GAASD,EAAAA,EAAAA,cAAY,WACzBf,EAAY,IAAII,QACf,IAEGa,IAAoBpB,IAAcE,EAExC,OACE,gBAACmB,EAAA,EAAD,KACE,mCACA,4BACID,GAAkB,0BAAQE,QAASL,GAAjB,SACnBG,GAAkB,0BAAQE,QAASH,GAAjB,SAErB,yBAAIf,EAAJ","sources":["webpack://utils-cool/./src/components/Layout.js","webpack://utils-cool/./src/pages/timer.js","webpack://utils-cool/./src/hooks/useCurrentDate.js"],"sourcesContent":["import React from 'react'\nimport { Link } from 'gatsby'\n\nconst Layout = ({children}) => {\n  return (\n    <>\n      <nav>\n        <Link to='/'>Home</Link>\n        <Link to='/timer'>Timer</Link>\n      </nav>\n      <main>\n        {children}\n      </main>\n    </>\n  )\n}\n\nexport default Layout","import React, { useCallback, useState } from 'react';\nimport Layout from '../components/Layout'\nimport useCurrentDate from \"../hooks/useCurrentDate\"\n\nconst Timer = () => {\n  const [startDate, setStartDate] = useState(null)\n  const [stopDate, setStopDate] = useState(null)\n  \n  const elapsed = useSecondsElapsed(startDate, stopDate)\n  const onStart = useCallback(() => {\n    setStartDate(new Date()) \n    setStopDate(null)\n  }, [])\n\n  const onStop = useCallback(() => {\n    setStopDate(new Date())\n  }, [])\n\n  const isTimerRunning = (!!startDate && !stopDate)\n\n  return (\n    <Layout>\n      <h1>Timer</h1>\n      <div>\n        {!isTimerRunning && <button onClick={onStart}>Start</button>}\n        {isTimerRunning && <button onClick={onStop}>Stop</button>}\n      </div>\n      <p>{elapsed} seconds elapsed</p>\n    </Layout>\n  )\n}\n\nfunction useSecondsElapsed(startDate, stopDate) {\n  const currentDate = useCurrentDate(30)\n\n  if (!startDate) {\n    return 0;\n  }\n\n  const compareDate = stopDate || currentDate\n  const ms = compareDate.getTime() - startDate.getTime()\n  return ms / 1000\n}\n\nexport default Timer;","import { useState, useEffect } from \"react\"\n\nexport default function useCurrentDate(refreshRateHz = 60) {\n  const [date, setDate] = useState(new Date())\n\n  useEffect(() => {\n    const handle = setInterval(() => {\n      setDate(new Date())\n    }, 1000/refreshRateHz)\n\n    return () => clearInterval(handle)\n  }, [refreshRateHz])\n\n  return date\n}"],"names":["children","to","useState","startDate","setStartDate","stopDate","setStopDate","elapsed","currentDate","refreshRateHz","Date","date","setDate","useEffect","handle","setInterval","clearInterval","useCurrentDate","getTime","useSecondsElapsed","onStart","useCallback","onStop","isTimerRunning","Layout","onClick"],"sourceRoot":""}